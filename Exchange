#!/usr/bin/python

import sys


book = {}
output = []

def parse_entry(line):
        try:
        	check = True
                trader, inst, vol, price = line.split(":")
        	if (not trader or not inst or not vol or not price) or (vol == 0) or (price < 0):
        		check = False
        		print("Found an order with invalid properties")

                return (trader.strip(), inst.strip(), float(vol.strip()), float(price.strip())), check

        # Check if the order has all the properties
        except ValueError:
        	print("Found an Order with missing properties")		
        	return [], False

def match_entry(buy, sell, ref):
        (buy_id, buy_vol, buy_price) = buy
        (sell_id, sell_vol, sell_price) = sell
        trade_vol = 0
        trade_price = 0
        
        if buy_price >= sell_price:
        	if ref is 'buy':
        		trade_price = buy_price
        	else:
        		trade_price = sell_price
                
                if buy_vol > sell_vol:
                        trade_vol = sell_vol
                        buy = (buy_id, buy_vol - sell_vol, buy_price)
                        sell = (sell_id, 0, sell_price)
                else:
                        trade_vol = buy_vol
                        buy = (buy_id, 0, buy_price)
                        sell = (sell_id, sell_vol - buy_vol, sell_price)

        trade = (buy_id, sell_id, trade_vol, trade_price)
        return buy, sell, trade

def insert_buy_order(buy, buy_orders):
        i = 0
        find = False
        while not find and i < len(buy_orders) :
                if buy[2] < buy_orders[i][2]:
                        i = i + 1
                else:
                        find = True

        buy_orders.insert(i, buy)
        return buy_orders

def insert_sell_order(sell, sell_orders):
        i = 0
        find = False
        while not find and i < len(sell_orders) :
                if sell[2] > sell_orders[i][2]:
                        i = i + 1
                else:
                        find = True

        sell_orders.insert(i, sell)
        return sell_orders

def addTradeToOutput(trade, inst):
        buy_id, sell_id, trade_vol, trade_price = trade
        if trade_vol > 0:
               trade = (buy_id, ':', sell_id, ':', inst, ':', str(trade_vol), ':', str(trade_price))
               trade = ''.join(trade)
               output.append(trade)

def book_entry(entry):
        global output
        trader, inst, vol, price = entry
        if inst not in book:
                book[inst] = {
                        'buy': [],
                        'sell': []
                }

        if vol > 0:
                buy = (trader, vol, price)
                sell_orders = book.get(inst, {}).get('sell')
                i = 0
        	while buy[1] > 0 and i < len(sell_orders) and buy[2] >= sell_orders[i][2]:
                        buy, sell, trade = match_entry(buy, sell_orders[i], 'sell')
                        i = i + 1
        		addTradeToOutput(trade, inst)

                # remove sold orders
                sell_orders = [sells for sells in sell_orders if sells[1] > 0]
                
        	# insert reminder of buy order
                if buy[1] > 0:
                        buy_orders = book.get(inst, {}).get('buy')
                        buy_orders = insert_buy_order(buy, buy_orders)
                        book[inst]['buy'] = buy_orders

        if vol < 0:
                sell = (trader, abs(vol), price)
                buy_orders = book.get(inst, {}).get('buy')
                i = 0
                while sell[1] > 0 and i < len(buy_orders) and sell[2] <= buy_orders[i][2]:
                        buy, sell, trade = match_entry(buy_orders[i], sell, 'buy')
                        i = i + 1
                        addTradeToOutput(trade, inst)

                # remove bought orders
                buy_orders = [buys for buys in buy_orders if buys[1] > 0]

                # insert reminder of buy order
                if sell[1] > 0:
                        sell_orders = book.get(inst, {}).get('sell')
                        sell_orders = insert_sell_order(sell, sell_orders)
                        book[inst]['sell'] = sell_orders



# Read orders from input
for line in sys.stdin:
        entry, check = parse_entry(line)
        if check:
                book_entry(entry)

# Write trades to output
for elem in output:
        print elem
